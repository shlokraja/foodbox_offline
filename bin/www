#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('outlet_app:server');
var http = require('http');
var cronJob = require('cron').CronJob;

// Doing the force tcp keepalive
require('node-ka-patch');

var redis = require('redis');
var redisClient = redis.createClient();
redisClient.on('error', function(msg) {
    console.error(msg);
});
var helper = require('../routes/helper');
var storeFoodItems = require('../misc/storeFoodItems');
var update_stock_count_expiry = require('../misc/updateStockCountExpiry');
var store_plc_config = require('../misc/storePLCConfig');
var store_live_stock = require('../misc/storeLiveStock');
var store_outlet_config = require('../misc/storeOutletConfig');
var storeOutletSessions = require('../misc/storeOutletSessions');
var check_incoming_po = require('../misc/checkIncomingPOStatus');
var populate_loading_issue_items = require('../misc/populateLoadingIssueItems');
var store_recovery_details = require('../misc/storeRecoveryDetails');
var store_dispenser_queue = require('../misc/storeDispenserQueue');
var store_item_ids = require('../misc/storeItemIds');
var BillProcess = require('../misc/BillProcess');
var store_reconcile_remarks = require('../misc/storeReconcileRemarks');
var store_session_timings = require('../misc/storeSessionTimings');
var automaticEOD = require('../misc/automaticEOD');
var automaticReconcile = require('../misc/automaticReconcile');
var sendPendingReconcileMail = require('../misc/sendPendingReconcileMail');
var automaticReconcileEOD = require('../misc/automaticReconcileEOD');
var storeAppUsers = require('../misc/storeAppUsers');
var storeFoodItemExpiry = require('../misc/storeFoodItemExpiry');

//peerbits crons
var sendStoredBillToHQ = require('../misc/sendStoredBillToHQ');
var sendingOfflinedetails = require("../misc/sendingOfflinedetails");
var sendingOfflineFoodIssues = require("../misc/sendingOfflineFoodIssues");
var sendRefundReplaceData = require('../misc/sendRefundReplaceData');
var storeFoodItems = require('../misc/storeFoodItems');
var getStaffroasterdetails = require('../misc/getStaffroasterdetails');
var savepettycashdata = require('../misc/savepettycashdata');
var cvm_update = require('../misc/cvm_update');
//var callAllOfflineFunction = require('../misc/callAllOfflineFunction');
// global variable to store list of item ids
OUTLET_ITEM_IDS = [];

RUN_COUNT = (new Date()).getTime();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
server.timeout = 0;
io = require('socket.io')(server);
process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0"

// This call returns the stock count to the order app
io.on('connection', function(socket) {
    console.log("Socket connection made by a client");
    // Getting the stock count from redis
    redisClient.get(helper.stock_count_node, function(err, reply) {
        if (err) {
            console.error(err);
            socket.emit('stock_count', { "error": "error while retreiving from redis- {}".format(err) });
            return;
        }
        var parsed_response = JSON.parse(reply);
        var item_id_list = [];
        for (var item_id in parsed_response) {
            item_id_list.push(item_id + '_locked_count');
        }
        // Getting the lock count from another data structure
        redisClient.mget(item_id_list, function(l_err, l_reply) {
            for (var item_id in parsed_response) {
                if (l_reply[item_id_list.indexOf(item_id + '_locked_count')]) {
                    parsed_response[item_id]["locked_count"] = parseInt(l_reply[item_id_list.indexOf(item_id + '_locked_count')]);
                } else {
                    parsed_response[item_id]["locked_count"] = 0;
                }
            }
      console.log("Emitting the stock count- " + parsed_response);
            socket.emit(helper.stock_count_node, parsed_response);
        });
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

server.on('close', function() {
    debug("Server is closing this connection");
})

server.on('clientError', function(exception, socket) {
    debug("An error from client happened- ", exception);
})

// Starting the cron job to send live stock data every hour
var job = new cronJob('0 * * * *', function() {
        store_live_stock();
        //storeFoodItems();
    },
    true, /* Start the job right now */
    'Asia/Kolkata' /* Time zone of this job. */
);

// Starting the cron job to send live stock data every minute
var job1 = new cronJob('0 * * * *', function() {
        storeFoodItems();
    },
    true, /* Start the job right now */
    'Asia/Kolkata' /* Time zone of this job. */
);
automaticReconcile.InitAutomaticReconcile();
 storeFoodItems();
 storeAppUsers();
 store_recovery_details();
 store_dispenser_queue();
 store_plc_config();
 store_outlet_config();
 storeOutletSessions();
 populate_loading_issue_items();
 store_item_ids();
 store_reconcile_remarks();
 store_session_timings();
 check_incoming_po();
 storeFoodItemExpiry(); 

//  The update of stock_count on expiry of items
setInterval(update_stock_count_expiry, 60000);
setInterval(check_incoming_po, 1 * 60000);
setInterval(populate_loading_issue_items, 60 * 60000);

setInterval(BillProcess.InitBillPush, (60000 * 30));

//  Keeping the config refresh interval to be every hour
setInterval(store_plc_config, 3600000);
setInterval(store_outlet_config, 3600000);
setInterval(storeAppUsers,3600000);
setInterval(storeFoodItemExpiry, 3600000);
// Auto expiry  changes
setInterval(storeOutletSessions, 3600000);

//  Keeping the po_details refresh interval to be every 10 mins
setInterval(store_reconcile_remarks, 600000);
setInterval(store_session_timings, 600000);


setInterval(automaticReconcile.InitAutomaticReconcile, 60000);
setInterval(automaticReconcileEOD.InitEODAutomaticReconcile, 30 * 60000);
setInterval(sendPendingReconcileMail.InitPendingReconcileMail, 30 * 60000);
setInterval(automaticEOD.InitAutomaticEOD, 30 * 60000);
//setInterval(automaticEOD.InitAutomaticEOD, 60000);
/*
  functions created by peerbits
  aug 3
*/
sendRefundReplaceData();
getStaffroasterdetails();
storeFoodItems();

sendStoredBillToHQ();
sendingOfflineFoodIssues();
savepettycashdata()


setInterval(sendRefundReplaceData, 180000);
setInterval(sendStoredBillToHQ, 360000);
setInterval(getStaffroasterdetails, 600000 * 6);
setInterval(storeFoodItems, 300000 * 6);
setInterval(sendingOfflineFoodIssues, 300000);
setInterval(savepettycashdata, 500000);

//setInterval(sendRefundReplaceData, 300000);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' 
    	?'Pipe ' + port 
	
	:'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' 
        ?'pipe ' + addr 
        :'port ' + addr.port;
    debug('Listening on ' + bind);
}




// new changes releated with place orders

//// Test connection server
//// var server_port = '9099';
//// var outlet_id = process.env.OUTLET_ID;
//// var hq_url = process.env.HQ_URL;

////if (hq_url)
////{
////    server_ip_address = hq_url.split(':')[1];
////}

//var server_ip_address = "//103.21.76.186";
//var server_port = '9099';
//var outlet_id = 6;

//var username = outlet_id;

//console.log("test mobile socket");
//mobilesocket = require('socket.io-client')('http:' + server_ip_address + ':' + server_port, {
//    forceNew: true
//});

//mobilesocket.emit("add-user", { "username": username });

//var result = TestPrivateMessage();

//mobilesocket.emit("private-message", {
//    "username": result.username,
//    "content": result.content
//});

//function TestPrivateMessage() {
//    var result = { "username": outlet_id, "content": "Mobile socket connection made by a client" };
//    return result;
//}

//var PlaceOrder = require('../public/js/mobileapp').PlaceOrder;

//mobilesocket.on('send-order-request-to-client', function (data) {
//    console.log("Outlet send-order-request-to-client: " + data.outletid);
//    console.log(data);

//    if (data != null)
//    {
//        console.log("Place order start");
//        PlaceOrder(data);
//    }
//});